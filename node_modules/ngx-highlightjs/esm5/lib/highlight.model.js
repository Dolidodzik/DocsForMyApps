/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/**
 * @record
 */
export function HighlightLibrary() { }
if (false) {
    /**
     * Core highlighting function.
     * @param {?} name Accepts a language name, or an alias
     * @param {?} value A string with the code to highlight.
     * @param {?} ignore_illegals When present and evaluates to a true value, forces highlighting to finish
     * even in case of detecting illegal syntax for the language instead of throwing an exception.
     * @param {?=} continuation An optional mode stack representing unfinished parsing.
     * When present, the function will restart parsing from this state instead of initializing a new one
     * @return {?}
     */
    HighlightLibrary.prototype.highlight = function (name, value, ignore_illegals, continuation) { };
    /**
     * Highlighting with language detection.
     * @param {?} value Accepts a string with the code to highlight
     * @param {?} languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     * @return {?}
     */
    HighlightLibrary.prototype.highlightAuto = function (value, languageSubset) { };
    /**
     * Post-processing of the highlighted markup.
     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.
     * Options are set globally with configure.
     * @param {?} value Accepts a string with the highlighted markup
     * @return {?}
     */
    HighlightLibrary.prototype.fixMarkup = function (value) { };
    /**
     * Applies highlighting to a DOM node containing code.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.
     * See the class reference for all available language names and aliases.
     * @param {?} block The element to apply highlight on.
     * @return {?}
     */
    HighlightLibrary.prototype.highlightBlock = function (block) { };
    /**
     * Configures global options:
     * @param {?} config HighlightJs configuration argument
     * @return {?}
     */
    HighlightLibrary.prototype.configure = function (config) { };
    /**
     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
     * @return {?}
     */
    HighlightLibrary.prototype.initHighlighting = function () { };
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param {?} name A string with the name of the language being registered
     * @param {?} language A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     * @return {?}
     */
    HighlightLibrary.prototype.registerLanguage = function (name, language) { };
    /**
     * @return {?} The languages names list.
     */
    HighlightLibrary.prototype.listLanguages = function () { };
    /**
     * Looks up a language by name or alias.
     * @param {?} name Language name
     * @return {?} The language object if found, undefined otherwise.
     */
    HighlightLibrary.prototype.getLanguage = function (name) { };
    /**
     * Add line numbers to code element
     * @param {?} el Code element
     * @return {?}
     */
    HighlightLibrary.prototype.lineNumbersBlock = function (el) { };
}
/**
 * @record
 */
export function HighlightConfig() { }
if (false) {
    /**
     * tabReplace: a string used to replace TAB characters in indentation.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.tabReplace;
    /**
     * useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.useBR;
    /**
     * classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.classPrefix;
    /**
     * languages: an array of language names and aliases restricting auto detection to only these languages.
     * @type {?|undefined}
     */
    HighlightConfig.prototype.languages;
}
/**
 * @record
 */
export function HighlightResult() { }
if (false) {
    /** @type {?|undefined} */
    HighlightResult.prototype.language;
    /** @type {?|undefined} */
    HighlightResult.prototype.second_best;
    /** @type {?|undefined} */
    HighlightResult.prototype.top;
    /** @type {?|undefined} */
    HighlightResult.prototype.value;
}
/**
 * @record
 */
export function HighlightOptions() { }
if (false) {
    /** @type {?|undefined} */
    HighlightOptions.prototype.config;
    /** @type {?|undefined} */
    HighlightOptions.prototype.languages;
    /** @type {?|undefined} */
    HighlightOptions.prototype.lineNumbers;
}
/** @type {?} */
export var HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWhpZ2hsaWdodGpzLyIsInNvdXJjZXMiOlsibGliL2hpZ2hsaWdodC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUUvQyxzQ0F5RUM7Ozs7Ozs7Ozs7OztJQTlEQyxpR0FBc0c7Ozs7Ozs7O0lBUXRHLGdGQUF3RTs7Ozs7Ozs7SUFReEUsNERBQWlDOzs7Ozs7OztJQVFqQyxpRUFBeUM7Ozs7OztJQU16Qyw2REFBeUM7Ozs7O0lBS3pDLDhEQUF5Qjs7Ozs7Ozs7SUFRekIsNEVBQTBEOzs7O0lBSzFELDJEQUEwQjs7Ozs7O0lBTzFCLDZEQUErQjs7Ozs7O0lBTS9CLGdFQUFvQzs7Ozs7QUFHdEMscUNBU0M7Ozs7OztJQVBDLHFDQUFvQjs7Ozs7SUFFcEIsZ0NBQWdCOzs7OztJQUVoQixzQ0FBcUI7Ozs7O0lBRXJCLG9DQUFxQjs7Ozs7QUFHdkIscUNBS0M7OztJQUpDLG1DQUFrQjs7SUFDbEIsc0NBQWtCOztJQUNsQiw4QkFBVTs7SUFDVixnQ0FBZTs7Ozs7QUFHakIsc0NBSUM7OztJQUhDLGtDQUF5Qjs7SUFDekIscUNBQW1EOztJQUNuRCx1Q0FBc0I7OztBQUd4QixNQUFNLEtBQU8saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQW1CLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0TGlicmFyeSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvcmUgaGlnaGxpZ2h0aW5nIGZ1bmN0aW9uLlxyXG4gICAqIEBwYXJhbSBuYW1lIEFjY2VwdHMgYSBsYW5ndWFnZSBuYW1lLCBvciBhbiBhbGlhc1xyXG4gICAqIEBwYXJhbSB2YWx1ZSBBIHN0cmluZyB3aXRoIHRoZSBjb2RlIHRvIGhpZ2hsaWdodC5cclxuICAgKiBAcGFyYW0gaWdub3JlX2lsbGVnYWxzIFdoZW4gcHJlc2VudCBhbmQgZXZhbHVhdGVzIHRvIGEgdHJ1ZSB2YWx1ZSwgZm9yY2VzIGhpZ2hsaWdodGluZyB0byBmaW5pc2hcclxuICAgKiBldmVuIGluIGNhc2Ugb2YgZGV0ZWN0aW5nIGlsbGVnYWwgc3ludGF4IGZvciB0aGUgbGFuZ3VhZ2UgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBleGNlcHRpb24uXHJcbiAgICogQHBhcmFtIGNvbnRpbnVhdGlvbiBBbiBvcHRpb25hbCBtb2RlIHN0YWNrIHJlcHJlc2VudGluZyB1bmZpbmlzaGVkIHBhcnNpbmcuXHJcbiAgICogV2hlbiBwcmVzZW50LCB0aGUgZnVuY3Rpb24gd2lsbCByZXN0YXJ0IHBhcnNpbmcgZnJvbSB0aGlzIHN0YXRlIGluc3RlYWQgb2YgaW5pdGlhbGl6aW5nIGEgbmV3IG9uZVxyXG4gICAqL1xyXG4gIGhpZ2hsaWdodChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGlnbm9yZV9pbGxlZ2FsczogYm9vbGVhbiwgY29udGludWF0aW9uPzogYW55KTogSGlnaGxpZ2h0UmVzdWx0O1xyXG5cclxuICAvKipcclxuICAgKiBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24uXHJcbiAgICogQHBhcmFtIHZhbHVlIEFjY2VwdHMgYSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBoaWdobGlnaHRcclxuICAgKiBAcGFyYW0gbGFuZ3VhZ2VTdWJzZXQgQW4gb3B0aW9uYWwgYXJyYXkgb2YgbGFuZ3VhZ2UgbmFtZXMgYW5kIGFsaWFzZXMgcmVzdHJpY3RpbmcgZGV0ZWN0aW9uIHRvIG9ubHkgdGhvc2UgbGFuZ3VhZ2VzLlxyXG4gICAqIFRoZSBzdWJzZXQgY2FuIGFsc28gYmUgc2V0IHdpdGggY29uZmlndXJlLCBidXQgdGhlIGxvY2FsIHBhcmFtZXRlciBvdmVycmlkZXMgdGhlIG9wdGlvbiBpZiBzZXQuXHJcbiAgICovXHJcbiAgaGlnaGxpZ2h0QXV0byh2YWx1ZTogc3RyaW5nLCBsYW5ndWFnZVN1YnNldDogc3RyaW5nW10pOiBIaWdobGlnaHRSZXN1bHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFBvc3QtcHJvY2Vzc2luZyBvZiB0aGUgaGlnaGxpZ2h0ZWQgbWFya3VwLlxyXG4gICAqIEN1cnJlbnRseSBjb25zaXN0cyBvZiByZXBsYWNpbmcgaW5kZW50YXRpb24gVEFCIGNoYXJhY3RlcnMgYW5kIHVzaW5nIDxicj4gdGFncyBpbnN0ZWFkIG9mIG5ldy1saW5lIGNoYXJhY3RlcnMuXHJcbiAgICogT3B0aW9ucyBhcmUgc2V0IGdsb2JhbGx5IHdpdGggY29uZmlndXJlLlxyXG4gICAqIEBwYXJhbSB2YWx1ZSBBY2NlcHRzIGEgc3RyaW5nIHdpdGggdGhlIGhpZ2hsaWdodGVkIG1hcmt1cFxyXG4gICAqL1xyXG4gIGZpeE1hcmt1cCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBBcHBsaWVzIGhpZ2hsaWdodGluZyB0byBhIERPTSBub2RlIGNvbnRhaW5pbmcgY29kZS5cclxuICAgKiBUaGUgZnVuY3Rpb24gdXNlcyBsYW5ndWFnZSBkZXRlY3Rpb24gYnkgZGVmYXVsdCBidXQgeW91IGNhbiBzcGVjaWZ5IHRoZSBsYW5ndWFnZSBpbiB0aGUgY2xhc3MgYXR0cmlidXRlIG9mIHRoZSBET00gbm9kZS5cclxuICAgKiBTZWUgdGhlIGNsYXNzIHJlZmVyZW5jZSBmb3IgYWxsIGF2YWlsYWJsZSBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcy5cclxuICAgKiBAcGFyYW0gYmxvY2sgVGhlIGVsZW1lbnQgdG8gYXBwbHkgaGlnaGxpZ2h0IG9uLlxyXG4gICAqL1xyXG4gIGhpZ2hsaWdodEJsb2NrKGJsb2NrOiBIVE1MRWxlbWVudCk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbmZpZ3VyZXMgZ2xvYmFsIG9wdGlvbnM6XHJcbiAgICogQHBhcmFtIGNvbmZpZyBIaWdobGlnaHRKcyBjb25maWd1cmF0aW9uIGFyZ3VtZW50XHJcbiAgICovXHJcbiAgY29uZmlndXJlKGNvbmZpZzogSGlnaGxpZ2h0Q29uZmlnKTogdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYWxsIDxwcmU+PGNvZGU+Li48L2NvZGU+PC9wcmU+IGJsb2NrcyBvbiBhIHBhZ2UuXHJcbiAgICovXHJcbiAgaW5pdEhpZ2hsaWdodGluZygpOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBBZGRzIG5ldyBsYW5ndWFnZSB0byB0aGUgbGlicmFyeSB1bmRlciB0aGUgc3BlY2lmaWVkIG5hbWUuIFVzZWQgbW9zdGx5IGludGVybmFsbHkuXHJcbiAgICogQHBhcmFtIG5hbWUgQSBzdHJpbmcgd2l0aCB0aGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2UgYmVpbmcgcmVnaXN0ZXJlZFxyXG4gICAqIEBwYXJhbSBsYW5ndWFnZSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbi5cclxuICAgKiBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkIHRoZSBobGpzIG9iamVjdCB0byBiZSBhYmxlIHRvIHVzZSBjb21tb24gcmVndWxhciBleHByZXNzaW9ucyBkZWZpbmVkIHdpdGhpbiBpdC5cclxuICAgKi9cclxuICByZWdpc3Rlckxhbmd1YWdlKG5hbWU6IHN0cmluZywgbGFuZ3VhZ2U6ICgpID0+IGFueSk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm4gVGhlIGxhbmd1YWdlcyBuYW1lcyBsaXN0LlxyXG4gICAqL1xyXG4gIGxpc3RMYW5ndWFnZXMoKTogc3RyaW5nW107XHJcblxyXG4gIC8qKlxyXG4gICAqIExvb2tzIHVwIGEgbGFuZ3VhZ2UgYnkgbmFtZSBvciBhbGlhcy5cclxuICAgKiBAcGFyYW0gbmFtZSBMYW5ndWFnZSBuYW1lXHJcbiAgICogQHJldHVybiBUaGUgbGFuZ3VhZ2Ugb2JqZWN0IGlmIGZvdW5kLCB1bmRlZmluZWQgb3RoZXJ3aXNlLlxyXG4gICAqL1xyXG4gIGdldExhbmd1YWdlKG5hbWU6IHN0cmluZyk6IGFueTtcclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGxpbmUgbnVtYmVycyB0byBjb2RlIGVsZW1lbnRcclxuICAgKiBAcGFyYW0gZWwgQ29kZSBlbGVtZW50XHJcbiAgICovXHJcbiAgbGluZU51bWJlcnNCbG9jayhlbDogRWxlbWVudCk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGlnaGxpZ2h0Q29uZmlnIHtcclxuICAvKiogdGFiUmVwbGFjZTogYSBzdHJpbmcgdXNlZCB0byByZXBsYWNlIFRBQiBjaGFyYWN0ZXJzIGluIGluZGVudGF0aW9uLiAqL1xyXG4gIHRhYlJlcGxhY2U/OiBzdHJpbmc7XHJcbiAgLyoqIHVzZUJSOiBhIGZsYWcgdG8gZ2VuZXJhdGUgPGJyPiB0YWdzIGluc3RlYWQgb2YgbmV3LWxpbmUgY2hhcmFjdGVycyBpbiB0aGUgb3V0cHV0LCB1c2VmdWwgd2hlbiBjb2RlIGlzIG1hcmtlZCB1cCB1c2luZyBhIG5vbi08cHJlPiBjb250YWluZXIuICovXHJcbiAgdXNlQlI/OiBib29sZWFuO1xyXG4gIC8qKiBjbGFzc1ByZWZpeDogYSBzdHJpbmcgcHJlZml4IGFkZGVkIGJlZm9yZSBjbGFzcyBuYW1lcyBpbiB0aGUgZ2VuZXJhdGVkIG1hcmt1cCwgdXNlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBzdHlsZXNoZWV0cy4gKi9cclxuICBjbGFzc1ByZWZpeD86IHN0cmluZztcclxuICAvKiogbGFuZ3VhZ2VzOiBhbiBhcnJheSBvZiBsYW5ndWFnZSBuYW1lcyBhbmQgYWxpYXNlcyByZXN0cmljdGluZyBhdXRvIGRldGVjdGlvbiB0byBvbmx5IHRoZXNlIGxhbmd1YWdlcy4gKi9cclxuICBsYW5ndWFnZXM/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRSZXN1bHQge1xyXG4gIGxhbmd1YWdlPzogc3RyaW5nO1xyXG4gIHNlY29uZF9iZXN0PzogYW55O1xyXG4gIHRvcD86IGFueTtcclxuICB2YWx1ZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaWdobGlnaHRPcHRpb25zIHtcclxuICBjb25maWc/OiBIaWdobGlnaHRDb25maWc7XHJcbiAgbGFuZ3VhZ2VzPzogeyBbbmFtZTogc3RyaW5nXTogKCkgPT4gUHJvbWlzZTxhbnk+IH07XHJcbiAgbGluZU51bWJlcnM/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgSElHSExJR0hUX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48SGlnaGxpZ2h0T3B0aW9ucz4oJ0hJR0hMSUdIVF9PUFRJT05TJyk7XHJcbiJdfQ==